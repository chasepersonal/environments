- name: Import instance variables
  include_vars:
    dir: 
    - 'vars/harbor'
    - 'vars/aws'

- name: Install Docker dependencies
  apt:
    name: "{{ packages }}"
  vars:
    packages:
    - apt-transport-https
    - curl
    - software-properties-common
  become: true

- name: Download docker key
  shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  
- name: Install Docker
  apt:
    name: docker.io
  become: true

- name: Add current user to the Docker group
  user:
    name: "{{ user }}"
    group: docker
    append: yes
    become: true
  
- name: Start and enable Docker service
  service:
    name: docker
    state: started
    enabled: yes
    become: true

- name: Download Docker Compose
  shell: "curl -s {{ url }} | grep {{ first_grep }} | grep {{ second_grep }} | {{ cut_action }} | wget -qi -"
  vars:
    url: https://api.github.com/repos/docker/compose/releases/latest
    first_grep: browser_download_url
    second_grep: docker-compose-Linux-x86_64
    cut_action: cut -d '"' -f 4
  
- name: Make Docker Compose file executable
  file:
    path: "/home/{{ user }}"
    mode: "700"

- name: Move Docker Compose executable to the bin
  shell: mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose
  become: true

- name: Download Let's Encrypt Certbot
  command: wget https://dl.eff.org/certbot-auto

- name: Make certbot file executable
  file:
    path: "/home/{{ user }}"
    mode: "700"

- name: Move certbot file to the bin
  shell: mv certbot-auto /usr/local/bin
  become: true

- name: Run certbot to generate Let's Encrypt certificates
  shell: "certbot-auto certonly --standalone -d {{ domain }} --preferred-challenges http --agree-tos -n -m {{ email }} --keep-until-expiring"

- name: Download Harbor
  shell: "curl -s {{ repo_url }} | grep -o '{{ regex_locator }}' | wget -qi -"
  vars:
    repo_url: https://api.github.com/repos/goharbor/harbor/releases/latest
    regex_locator: https://storage[a-zA-Z.-]*/[a-zA-Z0-9+-]*/[a-zA-Z0-9.+-]*/[a-zA-Z0-9.+-]*

- name: Extract files from downloaded .tgz
  unarchive:
    src: harbor-offline-installer*.tgz
    dest: "/home/{{ user }}"

- name: Convert default harbor.yml to a backup
  command: mv harbor.yml harbor-backup.yml

- name: Set harbor install path
  set_fact:
    harbor_install_path: "/home/{{ user }}/harbor/"

- name: Setup harbor configuration outline
  template:
    src: harbor
    dest: "{{ harbor_install_path }}"

- name: Convert harbor configuration outline to usable .yml file
  command: mv harbor harbor.yml
    
- name: Install Harbor
  shell: ./install.sh --with-notary --with-clair --with-chartmuseum
  become: true

- name: Remove harbor.yml with credential information
  file:
    path: "{{ harbor_install_path }}/harbor.yml"
    state: absent

- name: Setup Harbor systemctl service on remote
  template:
    src: harbor.service
    dest: /etc/systemd/system/harbor.service
    owner: root
    group: root
    mode: "0755"
  become: true

- name: Stop all currently running Harbor services
  systemd:
    name: harbor
    state: stopped

- name: Start and enable Harbor service
  systemd:
    name: harbor
    state: started
    enabled: yes